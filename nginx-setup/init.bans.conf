# subscribe each nginx worker to published bans in redis
# TODO: we should have only one subscription per server and move local bans to a shared dict

init_worker_by_lua_block {
    local new_timer = ngx.timer.at
    local log = ngx.log
    local ERR = ngx.ERR
    local INFO = ngx.INFO
    local reader

    backgroundReader = function(premature)
        if(premature) then
            return
        end

        local config = require "config"
        local bans = require "bans"
        local cjson = require "cjson"
        local redis = require "resty.redis"
        local red = redis:new()

        red:set_timeout(1000) -- 1 sec
        local ok, err = red:connect(config.redis.host, config.redis.port)
        if not ok then
            log(ERR, "failed to connect to redis: ", err)
            return err
        end
        
        local res, err = red:subscribe("bans")
        if not res then
            log(ERR, "failed to subscribe redis channel: ", err)
            red:close()
            return err
        end

        while true do
            local res, err = red:read_reply()
            if res then
                if(res[1]=='message' and res[2]=='bans') then
                    -- update bans
                    local ban = res[3]
                    bans.add(ban)
                    log(INFO, "ban received: ", cjson.encode(ban))
                end
            elseif err then
                -- TODO: handle connection errors
                --red:close()
                --return err
            end
        end

    end

    local ok, err = new_timer(0, backgroundReader)
    if not ok then
        log(ERR, "failed to create timer: ", err)
        return
    end
}