worker_processes  1;

error_log logs/error.log;

events {
    worker_connections 1024;
}

http {
    # subscribe each nginx worker to published bans in redis
    init_worker_by_lua_block {
        local delay = 3  -- in seconds
        local new_timer = ngx.timer.at
        local log = ngx.log
        local ERR = ngx.ERR
        local INFO = ngx.INFO
        local reader

        backgroundReader = function(premature)
            if(premature) then
                return
            end

            local config = require "config"
            local bans = require "bans"
            local cjson = require "cjson"
            local redis = require "resty.redis"
            local red = redis:new()

            red:set_timeout(1000) -- 1 sec
            local ok, err = red:connect(config.redis.host, config.redis.port)
            if not ok then
                log(ERR, "failed to connect to redis: ", err)
                return err
            end
            
            local res, err = red:subscribe("bans")
            if not res then
                log(ERR, "failed to subscribe redis channel: ", err)
                red:close()
                return err
            end

            while true do
                local res, err = red:read_reply()
                if res then
                    if(res[1]=='message' and res[2]=='bans') then
                        -- update bans
                        local ban = res[3]
                        bans.add(ban)
                        log(INFO, "ban received: ", cjson.encode(ban))
                    end
                elseif err then
                    -- TODO: handle connection errors
                    --red:close()
                    --return err
                end
            end

        end

        local ok, err = new_timer(0, backgroundReader)
        if not ok then
            log(ERR, "failed to create timer: ", err)
            return
        end
    }

    server {
        listen 8080;
        location = /debug {
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello, world</p>")
            }
        }
        location = /debug/bans {
            content_by_lua_block {
                local bans = require "bans"
                local cjson = require "cjson"

                local res = bans.getAll()

                ngx.say(cjson.encode(res))
            }
        }
        location = /debug/redis {
            content_by_lua_block {
                local config = require "config"		 
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect(config.redis.host, config.redis.port)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

                ngx.say("dog: ", res)

                red:init_pipeline()
                red:set("cat", "Marry")
                red:set("horse", "Bob")
                red:get("cat")
                red:get("horse")
                local results, err = red:commit_pipeline()
                if not results then
                    ngx.say("failed to commit the pipelined requests: ", err)
                    return
                end

                for i, res in ipairs(results) do
                    if type(res) == "table" then
                        if res[1] == false then
                            ngx.say("failed to run command ", i, ": ", res[2])
                        else
                            -- process the table value
                        end
                    else
                        -- process the scalar value
                    end
                end

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = red:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            }
        }
    }
}
