worker_processes  1;
error_log logs/error.log;
events {
    worker_connections 1024;
}
http {
    server {
        listen 8080;
        location / {
            default_type text/html;
            content_by_lua '
                ngx.say("<p>hello, world</p>")
            ';
        }
        location /redis-sub {
            content_by_lua_block {

                local config = require "config"	
                local cjson = require "cjson"			
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec
                local ok, err = red:connect(config.redis.host, config.redis.port)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end
                
                local res, err = red:subscribe("dog")
                if not res then
                    ngx.say("1: failed to subscribe: ", err)
                    return
                end
                ngx.say("1: subscribe: ", cjson.encode(res))

                while true do
                    local res, err = red:read_reply()
                    if res then
                        if(res[1]=='message') then
                            ngx.say("1: receive: ", cjson.encode(res))
                            break
                        end
                    end
                end

                red:close()
            }
        }
        location /redis-test {
            content_by_lua_block {
                local config = require "config"		 
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect(config.redis.host, config.redis.port)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

                ngx.say("dog: ", res)

                red:init_pipeline()
                red:set("cat", "Marry")
                red:set("horse", "Bob")
                red:get("cat")
                red:get("horse")
                local results, err = red:commit_pipeline()
                if not results then
                    ngx.say("failed to commit the pipelined requests: ", err)
                    return
                end

                for i, res in ipairs(results) do
                    if type(res) == "table" then
                        if res[1] == false then
                            ngx.say("failed to run command ", i, ": ", res[2])
                        else
                            -- process the table value
                        end
                    else
                        -- process the scalar value
                    end
                end

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = red:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            }
        }
    }
}
